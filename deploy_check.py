#!/usr/bin/env python3
"""
üöÄ Script de V√©rification Pr√©-D√©ploiement - L√©a Bot WhatsApp
V√©rifie que tous les composants sont pr√™ts pour le d√©ploiement Railway
"""

import os
import sys
import json
import sqlite3
from pathlib import Path
from dotenv import load_dotenv

# Couleurs pour l'affichage
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_status(message, status="info"):
    """Affiche un message avec couleur selon le statut"""
    if status == "success":
        print(f"{Colors.GREEN}‚úÖ {message}{Colors.END}")
    elif status == "error":
        print(f"{Colors.RED}‚ùå {message}{Colors.END}")
    elif status == "warning":
        print(f"{Colors.YELLOW}‚ö†Ô∏è  {message}{Colors.END}")
    else:
        print(f"{Colors.BLUE}‚ÑπÔ∏è  {message}{Colors.END}")

def check_file_exists(filepath, description):
    """V√©rifie qu'un fichier existe"""
    if Path(filepath).exists():
        print_status(f"{description}: {filepath}", "success")
        return True
    else:
        print_status(f"{description} MANQUANT: {filepath}", "error")
        return False

def check_env_variables():
    """V√©rifie les variables d'environnement"""
    print(f"\n{Colors.BOLD}üîë V√âRIFICATION VARIABLES D'ENVIRONNEMENT{Colors.END}")
    
    load_dotenv()
    
    required_vars = [
        ("OPENAI_API_KEY", "Cl√© API OpenAI"),
        ("TWILIO_ACCOUNT_SID", "SID Compte Twilio"),
        ("TWILIO_AUTH_TOKEN", "Token Auth Twilio"),
        ("TWILIO_PHONE_NUMBER", "Num√©ro WhatsApp Twilio")
    ]
    
    all_good = True
    for var_name, description in required_vars:
        value = os.getenv(var_name)
        if value and value != f"your-{var_name.lower().replace('_', '-')}-here":
            print_status(f"{description}: Configur√©", "success")
        else:
            print_status(f"{description}: NON CONFIGUR√â", "error")
            all_good = False
    
    return all_good

def check_dependencies():
    """V√©rifie les d√©pendances Python"""
    print(f"\n{Colors.BOLD}üì¶ V√âRIFICATION D√âPENDANCES{Colors.END}")
    
    try:
        import flask
        print_status(f"Flask: {flask.__version__}", "success")
    except ImportError:
        print_status("Flask: NON INSTALL√â", "error")
        return False
    
    try:
        import twilio
        print_status(f"Twilio: {twilio.__version__}", "success")
    except ImportError:
        print_status("Twilio: NON INSTALL√â", "error")
        return False
    
    try:
        import openai
        print_status(f"OpenAI: {openai.__version__}", "success")
    except ImportError:
        print_status("OpenAI: NON INSTALL√â", "error")
        return False
    
    return True

def check_database():
    """V√©rifie la base de donn√©es"""
    print(f"\n{Colors.BOLD}üíæ V√âRIFICATION BASE DE DONN√âES{Colors.END}")
    
    try:
        from database import init_db
        init_db()
        
        # V√©rifier les tables
        conn = sqlite3.connect('lea_nutrition.db')
        cursor = conn.cursor()
        
        tables = ['users', 'daily_intake', 'meals']
        for table in tables:
            cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}'")
            if cursor.fetchone():
                print_status(f"Table {table}: OK", "success")
            else:
                print_status(f"Table {table}: MANQUANTE", "error")
                return False
        
        conn.close()
        return True
        
    except Exception as e:
        print_status(f"Erreur base de donn√©es: {e}", "error")
        return False

def check_api_connections():
    """Teste les connexions API (optionnel)"""
    print(f"\n{Colors.BOLD}üåê TEST CONNEXIONS API{Colors.END}")
    
    load_dotenv()
    
    # Test OpenAI (optionnel car co√ªteux)
    openai_key = os.getenv('OPENAI_API_KEY')
    if openai_key and openai_key.startswith('sk-'):
        print_status("Cl√© OpenAI: Format valide", "success")
    else:
        print_status("Cl√© OpenAI: Format invalide", "warning")
    
    # Test Twilio (optionnel)
    twilio_sid = os.getenv('TWILIO_ACCOUNT_SID')
    if twilio_sid and twilio_sid.startswith('AC'):
        print_status("SID Twilio: Format valide", "success")
    else:
        print_status("SID Twilio: Format invalide", "warning")
    
    return True

def check_railway_config():
    """V√©rifie la configuration Railway"""
    print(f"\n{Colors.BOLD}üöÇ V√âRIFICATION CONFIGURATION RAILWAY{Colors.END}")
    
    files_ok = True
    
    # V√©rifier Procfile
    if check_file_exists("Procfile", "Procfile"):
        with open("Procfile", "r") as f:
            content = f.read().strip()
            if "python app_production.py" in content:
                print_status("Procfile: Commande correcte", "success")
            else:
                print_status("Procfile: Commande incorrecte", "error")
                files_ok = False
    else:
        files_ok = False
    
    # V√©rifier railway.json
    if check_file_exists("railway.json", "Configuration Railway"):
        try:
            with open("railway.json", "r") as f:
                config = json.load(f)
                if config.get("deploy", {}).get("startCommand") == "python app_production.py":
                    print_status("railway.json: Configuration correcte", "success")
                else:
                    print_status("railway.json: Configuration incorrecte", "warning")
        except json.JSONDecodeError:
            print_status("railway.json: Format JSON invalide", "error")
            files_ok = False
    else:
        files_ok = False
    
    # V√©rifier requirements.txt
    if check_file_exists("requirements.txt", "D√©pendances Python"):
        with open("requirements.txt", "r") as f:
            deps = f.read()
            required_deps = ["flask", "twilio", "openai", "python-dotenv"]
            for dep in required_deps:
                if dep in deps.lower():
                    print_status(f"D√©pendance {dep}: OK", "success")
                else:
                    print_status(f"D√©pendance {dep}: MANQUANTE", "error")
                    files_ok = False
    else:
        files_ok = False
    
    return files_ok

def main():
    """Fonction principale de v√©rification"""
    print(f"{Colors.BOLD}üöÄ V√âRIFICATION PR√â-D√âPLOIEMENT - L√âA BOT WHATSAPP{Colors.END}")
    print("=" * 60)
    
    checks = [
        ("Fichiers de configuration", check_railway_config),
        ("Variables d'environnement", check_env_variables),
        ("D√©pendances Python", check_dependencies),
        ("Base de donn√©es", check_database),
        ("Connexions API", check_api_connections)
    ]
    
    results = []
    for check_name, check_func in checks:
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            print_status(f"Erreur lors de {check_name}: {e}", "error")
            results.append((check_name, False))
    
    # R√©sum√© final
    print(f"\n{Colors.BOLD}üìä R√âSUM√â FINAL{Colors.END}")
    print("=" * 60)
    
    all_passed = True
    for check_name, passed in results:
        if passed:
            print_status(f"{check_name}: VALID√â", "success")
        else:
            print_status(f"{check_name}: √âCHEC", "error")
            all_passed = False
    
    print("\n" + "=" * 60)
    if all_passed:
        print_status("üéâ TOUS LES TESTS PASS√âS - PR√äT POUR D√âPLOIEMENT!", "success")
        print(f"{Colors.BLUE}Prochaines √©tapes:{Colors.END}")
        print("1. Pusher le code sur GitHub")
        print("2. Connecter le repo √† Railway")
        print("3. Configurer les variables d'environnement sur Railway")
        print("4. D√©ployer et tester")
        return 0
    else:
        print_status("‚ùå CERTAINS TESTS ONT √âCHOU√â - CORRIGER AVANT D√âPLOIEMENT", "error")
        return 1

if __name__ == "__main__":
    sys.exit(main())
